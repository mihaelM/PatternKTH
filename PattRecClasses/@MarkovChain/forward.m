function [alfaHat, c]=forward(mc,pX)%[alfaHat, c]=forward(mc,pX)%calculates state and observation probabilities for one single data sequence,%using the forward algorithm, for a given single MarkovChain object,%to be used when the MarkovChain is included in a HMM object.%%Input:%mc= single MarkovChain object%pX= matrix with state-conditional likelihood values,%   without considering the Markov depencence between sequence samples.%	pX(j,t)= myScale(t)* P( X(t)= observed x(t) | S(t)= j ); j=1..N; t=1..T% for every x during time, with what probability is it outputed by% every(1..N) time%	(must be pre-calculated externally)%NOTE: pX may be arbitrarily scaled, as defined externally,%   i.e., pX may not be a properly normalized probability density or mass.%%NOTE: If the HMM has Finite Duration, it is assumed to have reached the end%after the last data element in the given sequence, i.e. S(T+1)=END=N+1.%%Result:%alfaHat=matrix with normalized state probabilities, given the observations:%	alfaHat(j,t)=P[S(t)=j|x(1)...x(t), HMM]; t=1..T%c=row vector with observation probabilities, given the HMM:%	c(t)=P[x(t) | x(1)...x(t-1),HMM]; t=1..T%	c(1)*c(2)*..c(t)=P[x(1)..x(t)| HMM]%   If the HMM has Finite Duration, the last element includes%   the probability that the HMM ended at exactly the given sequence length, i.e.%   c(T+1)= P( S(T+1)=N+1| x(1)...x(T-1), x(T)  )%Thus, for an infinite-duration HMM:%   length(c)=T%   prod(c)=P( x(1)..x(T) )%and, for a finite-duration HMM:%   length(c)=T+1%   prod(c)= P( x(1)..x(T), S(T+1)=END )%%NOTE: IF pX was scaled externally, the values in c are %   correspondingly scaled versions of the true probabilities.%%--------------------------------------------------------%Code Authors:%--------------------------------------------------------N=size(pX,1);T=size(pX,2);%Number of observations, size(pX, 1) je number of states%-------------------- continue code from here, and delete error messagealfaTemp = zeros(N, T);c = zeros(1, T);alfaHat = zeros(N, T);for j = 1:N    alfaTemp(j, 1) = mc.InitialProb(j)*pX(j, 1);end   for j = 1:N    c(1) = c(1) + alfaTemp(j, 1);endfor j = 1:N    alfaHat(j, 1) = alfaTemp(j, 1) / c(1);endfor t = 2:T    for j = 1:N % postoji mogucnost da tu idemo do N+1, ako zelimo finite duration, ipak ne        help = 0;        for k = 1:N %ovo su tranzicije, to je N            help = help + alfaHat(k, t-1) * mc.TransitionProb(k, j);        end        alfaTemp(j, t) = alfaTemp(j,t) + pX(j, T)*help;    end       for k = 1:N        c(t) = c(t) + alfaTemp(k, t);    end    for j = 1:N        alfaHat(j, t) = alfaTemp(j,t) / c(t);    endendif mc.finiteDuration()    c(T+1) = 0;    for k = 1:N        c(T+1) = c(T+1) + alfaHat (k, T) * mc.TransitionProb(k, N+1);    endend    end